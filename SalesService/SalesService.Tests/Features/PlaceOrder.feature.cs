// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SalesService.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CriarUmPedidoFeature : object, Xunit.IClassFixture<CriarUmPedidoFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PlaceOrder.feature"
#line hidden
        
        public CriarUmPedidoFeature(CriarUmPedidoFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Features", "Criar um pedido", "Criar um novo pedido com os itens selecionados e vendedor indicado.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Pedido deve ser criado com status \"Aguardando pagamento\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Criar um pedido")]
        [Xunit.TraitAttribute("Description", "Pedido deve ser criado com status \"Aguardando pagamento\"")]
        public async System.Threading.Tasks.Task PedidoDeveSerCriadoComStatusAguardandoPagamento()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Pedido deve ser criado com status \"Aguardando pagamento\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("que fui atendido pelo representante de vendas de id \'90B443C6-2711-4380-B101-F2DF" +
                        "684F473E\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Units"});
                table1.AddRow(new string[] {
                            "AD96BD12-6A54-4CA4-B606-52BE1BEE160F",
                            "20"});
                table1.AddRow(new string[] {
                            "A0557406-471A-4889-9D35-784A36DEC927",
                            "1"});
#line 9
 await testRunner.AndAsync("que selecionei os produtos:", ((string)(null)), table1, "E ");
#line hidden
#line 13
 await testRunner.WhenAsync("registro uma nova venda", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 14
 await testRunner.ThenAsync("o pedido é criado com o status \'Aguardando pagamento\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Venda registrada sem itens")]
        [Xunit.TraitAttribute("FeatureTitle", "Criar um pedido")]
        [Xunit.TraitAttribute("Description", "Venda registrada sem itens")]
        public async System.Threading.Tasks.Task VendaRegistradaSemItens()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Venda registrada sem itens", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
 await testRunner.GivenAsync("que fui atendido pelo representante de vendas de id \'90B443C6-2711-4380-B101-F2DF" +
                        "684F473E\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Units"});
                table2.AddRow(new string[] {
                            "",
                            ""});
#line 20
 await testRunner.AndAsync("que selecionei os produtos:", ((string)(null)), table2, "E ");
#line hidden
#line 23
 await testRunner.WhenAsync("registro uma nova venda", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 24
 await testRunner.ThenAsync("o pedido não é criado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CriarUmPedidoFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CriarUmPedidoFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
