// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SalesService.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AtualizarUmPedidoFeature : object, Xunit.IClassFixture<AtualizarUmPedidoFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UpdateOrder.feature"
#line hidden
        
        public AtualizarUmPedidoFeature(AtualizarUmPedidoFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Features", "Atualizar um pedido", "Atualização de status ou de itens de um pedido.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Atualização de status válida")]
        [Xunit.TraitAttribute("FeatureTitle", "Atualizar um pedido")]
        [Xunit.TraitAttribute("Description", "Atualização de status válida")]
        [Xunit.InlineDataAttribute("F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8", "Aguardando pagamento", "Pagamento aprovado", new string[0])]
        [Xunit.InlineDataAttribute("F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8", "Aguardando pagamento", "Cancelado", new string[0])]
        [Xunit.InlineDataAttribute("51922E52-C325-4F96-B548-01D8BEF5E475", "Pagamento aprovado", "Enviado para transportadora", new string[0])]
        [Xunit.InlineDataAttribute("51922E52-C325-4F96-B548-01D8BEF5E475", "Pagamento aprovado", "Cancelado", new string[0])]
        [Xunit.InlineDataAttribute("FA0167FC-85BC-4039-B5B0-B9EAF525AB65", "Enviado para transportadora", "Entregue", new string[0])]
        public async System.Threading.Tasks.Task AtualizacaoDeStatusValida(string id, string statusAtual, string novoStatus, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("status atual", statusAtual);
            argumentsOfScenario.Add("novo status", novoStatus);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Atualização de status válida", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
 await testRunner.GivenAsync(string.Format("que tenho um pedido de id \'{0}\' e status \'{1}\'", id, statusAtual), ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 14
 await testRunner.WhenAsync(string.Format("atualizo o status do pedido de \'{0}\' para \'{1}\'", id, novoStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 15
 await testRunner.ThenAsync(string.Format("o status do pedido de id \'{0}\' atualiza para \'{1}\'", id, novoStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Atualização de status inválida")]
        [Xunit.TraitAttribute("FeatureTitle", "Atualizar um pedido")]
        [Xunit.TraitAttribute("Description", "Atualização de status inválida")]
        [Xunit.InlineDataAttribute("F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8", "Aguardando pagamento", "Enviado para transportadora", new string[0])]
        [Xunit.InlineDataAttribute("F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8", "Aguardando pagamento", "Entregue", new string[0])]
        [Xunit.InlineDataAttribute("F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8", "Aguardando pagamento", "Aguardando pagamento", new string[0])]
        [Xunit.InlineDataAttribute("51922E52-C325-4F96-B548-01D8BEF5E475", "Pagamento aprovado", "Entregue", new string[0])]
        [Xunit.InlineDataAttribute("51922E52-C325-4F96-B548-01D8BEF5E475", "Pagamento aprovado", "Aguardando pagamento", new string[0])]
        [Xunit.InlineDataAttribute("51922E52-C325-4F96-B548-01D8BEF5E475", "Pagamento aprovado", "Pagamento aprovado", new string[0])]
        [Xunit.InlineDataAttribute("FA0167FC-85BC-4039-B5B0-B9EAF525AB65", "Enviado para transportadora", "Cancelado", new string[0])]
        [Xunit.InlineDataAttribute("FA0167FC-85BC-4039-B5B0-B9EAF525AB65", "Enviado para transportadora", "Aguardando pagamento", new string[0])]
        [Xunit.InlineDataAttribute("FA0167FC-85BC-4039-B5B0-B9EAF525AB65", "Enviado para transportadora", "Pagamento aprovado", new string[0])]
        [Xunit.InlineDataAttribute("FA0167FC-85BC-4039-B5B0-B9EAF525AB65", "Enviado para transportadora", "Enviado para transportadora", new string[0])]
        [Xunit.InlineDataAttribute("CDFD5449-23EE-472A-A0D7-0034BC3DA0D2", "Cancelado", "Pagamento aprovado", new string[0])]
        [Xunit.InlineDataAttribute("CDFD5449-23EE-472A-A0D7-0034BC3DA0D2", "Cancelado", "Aguardando pagamento", new string[0])]
        [Xunit.InlineDataAttribute("CDFD5449-23EE-472A-A0D7-0034BC3DA0D2", "Cancelado", "Entregue", new string[0])]
        [Xunit.InlineDataAttribute("CDFD5449-23EE-472A-A0D7-0034BC3DA0D2", "Cancelado", "Enviado para transportadora", new string[0])]
        [Xunit.InlineDataAttribute("CDFD5449-23EE-472A-A0D7-0034BC3DA0D2", "Cancelado", "Cancelado", new string[0])]
        public async System.Threading.Tasks.Task AtualizacaoDeStatusInvalida(string id, string statusAtual, string novoStatus, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("status atual", statusAtual);
            argumentsOfScenario.Add("novo status", novoStatus);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Atualização de status inválida", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
 await testRunner.GivenAsync(string.Format("que tenho um pedido de id \'{0}\' e status \'{1}\'", id, statusAtual), ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 27
 await testRunner.WhenAsync(string.Format("atualizo o status do pedido de \'{0}\' para \'{1}\'", id, novoStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 28
 await testRunner.ThenAsync(string.Format("o pedido de id \'{0}\' continua no status \'{1}\'", id, statusAtual), ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Pedido não está no status \"Aguardando pagamento\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Atualizar um pedido")]
        [Xunit.TraitAttribute("Description", "Pedido não está no status \"Aguardando pagamento\"")]
        [Xunit.InlineDataAttribute("51922E52-C325-4F96-B548-01D8BEF5E475", "Pagamento aprovado", new string[0])]
        [Xunit.InlineDataAttribute("FA0167FC-85BC-4039-B5B0-B9EAF525AB65", "Enviado para transportadora", new string[0])]
        [Xunit.InlineDataAttribute("CDFD5449-23EE-472A-A0D7-0034BC3DA0D2", "Cancelado", new string[0])]
        public async System.Threading.Tasks.Task PedidoNaoEstaNoStatusAguardandoPagamento(string id, string statusAtual, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("status atual", statusAtual);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Pedido não está no status \"Aguardando pagamento\"", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
 await testRunner.GivenAsync(string.Format("que tenho um pedido de id \'{0}\' e status \'{1}\'", id, statusAtual), ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Units"});
                table3.AddRow(new string[] {
                            "AD96BD12-6A54-4CA4-B606-52BE1BEE160F",
                            "20"});
#line 53
 await testRunner.WhenAsync(string.Format("atualizo os itens do pedido de id \'{0}\' para:", id), ((string)(null)), table3, "Quando ");
#line hidden
#line 56
 await testRunner.ThenAsync(string.Format("o pedido de id \'{0}\' não é atualizado", id), ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Pedido no status \"Aguardando pagamento\" atualizado sem itens")]
        [Xunit.TraitAttribute("FeatureTitle", "Atualizar um pedido")]
        [Xunit.TraitAttribute("Description", "Pedido no status \"Aguardando pagamento\" atualizado sem itens")]
        public async System.Threading.Tasks.Task PedidoNoStatusAguardandoPagamentoAtualizadoSemItens()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Pedido no status \"Aguardando pagamento\" atualizado sem itens", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 65
 await testRunner.GivenAsync("que tenho um pedido de id \'F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8\' e status \'Aguard" +
                        "ando pagamento\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Units"});
                table4.AddRow(new string[] {
                            "",
                            ""});
#line 66
 await testRunner.WhenAsync("atualizo os itens do pedido de id \'F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8\' para:", ((string)(null)), table4, "Quando ");
#line hidden
#line 69
 await testRunner.ThenAsync("o pedido de id \'F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8\' não é atualizado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Pedido no status \"Aguardando pagamento\" atualizado com itens")]
        [Xunit.TraitAttribute("FeatureTitle", "Atualizar um pedido")]
        [Xunit.TraitAttribute("Description", "Pedido no status \"Aguardando pagamento\" atualizado com itens")]
        public async System.Threading.Tasks.Task PedidoNoStatusAguardandoPagamentoAtualizadoComItens()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Pedido no status \"Aguardando pagamento\" atualizado com itens", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 72
 await testRunner.GivenAsync("que tenho um pedido de id \'F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8\' e status \'Aguard" +
                        "ando pagamento\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "Units"});
                table5.AddRow(new string[] {
                            "AD96BD12-6A54-4CA4-B606-52BE1BEE160F",
                            "20"});
#line 73
 await testRunner.WhenAsync("atualizo os itens do pedido de id \'F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8\' para:", ((string)(null)), table5, "Quando ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "ProductId",
                            "ProductName",
                            "Units"});
                table6.AddRow(new string[] {
                            "AD96BD12-6A54-4CA4-B606-52BE1BEE160F",
                            "Resma de Papel A4",
                            "20"});
#line 76
 await testRunner.ThenAsync("o pedido de id \'F0CBD493-6F48-46AD-8D69-2D4ECFFAD6D8\' é atualizado para:", ((string)(null)), table6, "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AtualizarUmPedidoFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AtualizarUmPedidoFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
